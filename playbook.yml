- name: Create a nginx server with site
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - group_vars/env
  vars:
      ansible_python_interpreter: /usr/bin/python3

  tasks:
  - name: create VPC
    ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ network }}"
      region: "{{ aws_region }}"
      state: present
      dns_hostnames: yes
      dns_support: yes
      multi_ok: no
      tags:
        Name: "{{ vpc_name }}"
    register: vpc

  # - name: Add VPC definition to vars file
  #   lineinfile:
  #     path: group_vars/colman.env
  #     regexp: 'vpc_id: '
  #     line: 'vpc_id: {{ vpc.vpc.id }}'
  #     state: present
  #     create: True

  - name: associate subnet to the VPC
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      cidr: "{{ subnet_cidr }}"
      map_public: yes
      az: "{{ subnet }}"
      resource_tags:
        Name: "{{ vpc_name }}"
      wait: yes
    register: subnet

  # - name: Add subnet definition to vars file
  #   lineinfile:
  #     path: group_vars/colman1.env
  #     regexp: 'subnet_id: '
  #     line: 'subnet_id: {{ subnet.results[0].subnet.id }}'
  #     state: present
  #     create: True

  - name: create IGW
    ec2_vpc_igw:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      tags:
        Name: "{{ vpc_name }}_igw"
    register: igw

  - name: Add IGW definition to vars file
    lineinfile:
      path: group_vars/colman.env
      regexp: 'igw_id: '
      line: 'igw_id: {{ igw.gateway_id}}'
      state: present
      create: True

  - name: Route table for public Subnet
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      subnets:
        - "{{ subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id  }}"
      tags:
        Name: "{{ vpc_name }}_public_rt"

  - name: Create security group
    ec2_group:
      name: "{{ vpc_name }} VPC SG"
      description: "{{ vpc_name }} VPC SG"
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      rules:
        - proto: tcp
          ports:
          - 80
          - 22
          cidr_ip: 0.0.0.0/0
    register: sg

  - name: Create server
    ec2:
      image: "{{ aws_centos_ami }}"
      wait: yes
      instance_type: "{{ Server_type }}"
      region: "{{ aws_region }}"
      group_id: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      key_name: "{{ keypair }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp3
          volume_size: "{{ server_volume_size }}"
          delete_on_termination: true
      count_tag:
        Name: "{{ server_name }}"
        Environment: "{{ env }}"
      exact_count: 1
      instance_tags:
        Name: "{{ server_name }}"
        Environment: "{{ env }}"
      wait_timeout: 300
      assign_public_ip: yes
    register: server_ec2
  
  - debug: var=server_ec2.tagged_instances[0].public_ip

  - name: Add server public IP to application host group
    add_host: hostname={{ server_ec2.tagged_instances[0].public_ip }} groups=app

  - name: Add Public IP definition to vars file
    lineinfile:
      path: group_vars/colman.env
      regexp: 'server_id: '
      line: 'server_id: {{ server_ec2.tagged_instances[0].id }}'
      state: present
      create: True

  - name: Wait for SSH to start using external IP
    wait_for:
      host: "{{ server_ec2.tagged_instances[0].public_ip }}"
      port: 22
      timeout: 300

##############################################################
- name: Setup web server
  hosts: app
  user: ubuntu
  become: True
  gather_facts: True
  vars_files:
    - group_vars/env
  vars:
    ansible_ssh_private_key_file: "{{ cert }}"
  tasks:
    # - name: install base packages
    #   apt: 
    #     name: 
    #       - epel-release
    #     state: present

    - name: install base packages
      apt: 
        name: 
          - git
            #- nginx
        state: present

    - name: Clone my website
      git:
        repo: "{{ repo }}"
        dest: /home/ubuntu/project
        version: main
        key_file: ~/.ssh/id_rsa
        accept_hostkey: yes
        force: yes

    # - name: Copy nginx.conf file to the server
    #   copy:
    #     src: "files/nginx.conf"
    #     dest: /etc/nginx/nginx.conf

    #- name: restart nginx
    #service:
    #name: nginx
    #state: restarted
    #enabled: yes

    - name: Update apt-get repo and cache
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: install docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
        state: present 

    - name: clean docker
      shell: docker-compose -f "docker-compose - Copy.yml" down
      args:
         chdir: /home/ubuntu/project/
        
    - name: start docker app
      shell: docker-compose -f "docker-compose - Copy.yml" up -d --build 
      args:
         chdir: /home/ubuntu/project/
